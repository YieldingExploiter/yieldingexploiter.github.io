// copyright (c) 2021 yieldingcoder. all rights reserved.
const fs = require('fs');
const path = require('path');
const { exec } = require('child_process');
const ignoreList = ['.git', 'node_modules', 'objects'];
const loop = async v => {
	v = path.resolve(v);
	console.log('Looping in', v);
	const dir = fs.readdirSync(v);
	for (const i in dir) {
		await (async () => {
			let x = dir[i];
			x = path.join(v, x);
			let ignore = false;
			ignoreList.forEach(v => {
				ignore = ignore || x.split('\\').join('/').split('/').includes(v);
			});
			if (ignore) return;
			if (fs.statSync(x).isDirectory()) {
				await loop(x);
			} else {
				if (
					!x.endsWith('.png') &&
					!x.endsWith('.jpg') &&
					!x.endsWith('.ico') &&
					!x.endsWith('.webp')
				)
					return;
				if (x.includes('.modified')) return fs.unlinkSync(x);
				if (
					x.includes('- Lossy') ||
					x.includes('- Lossless') ||
					x.includes('.mod')
				)
					return;
				let l = x.split('.');
				l[l.length - 1] = 'mod';
				l = l.join('.');
				const v = (args, outd) => {
					if (fs.existsSync(`${l}.${outd}`)) {
						console.log(`${l}.${outd} already exists! Skipping...`);
						return new Promise(r => r());
					}
					const cmd =
						(process.platform == 'win32' ? '' : 'magick ') +
						`convert "${x}" ${args} "${l}.${outd}"`;
					console.log(`Executing ${cmd}`);
					return new Promise((resolve, reject) =>
						exec(cmd, (err, stdo, stde) => {
							console.log(
								`Returned for ${l}.${outd}`,
								(err ? `err: ${err}\n` : '') +
									(stdo ? `stdout: ${stdo}\n` : '') +
									(stde ? 'stderr: ' + stde : '')
							);
							if (err) reject(err);
							else resolve();
						})
					);
				};

				const rescale = async s => {
					await v(
						`-resize ${Math.floor(s * 10000) / 100}%`,
						`rescale-${Math.floor(s * 10000) / 100}.jpg`
					);
					await v(
						`-resize ${Math.floor(s * 10000) / 100}%`,
						`rescale-${Math.floor(s * 10000) / 100}.png`
					);
					await v(
						`-resize ${Math.floor(s * 10000) / 100}%`,
						`rescale-${Math.floor(s * 10000) / 100}.webp`
					);
				};
				await new Promise(resolve => {
					rescale(1).then(resolve);
					rescale(3 / 4).then(resolve);
					rescale(2 / 3).then(resolve);
					rescale(1 / 2).then(resolve);
					rescale(1 / 3).then(resolve);
					rescale(1 / 4).then(resolve);
					rescale(1 / 5).then(resolve);
					rescale(1 / 6).then(resolve);
					rescale(1 / 7).then(resolve);
					rescale(1 / 8).then(resolve);
					rescale(1 / 9).then(resolve);
					rescale(1 / 10).then(resolve);
					rescale(1 / 12).then(resolve);
					rescale(1 / 16).then(resolve);
					rescale(1 / 32).then(resolve);
					rescale(1 / 64).then(resolve);
				});
			}
		})();
	}
};
loop('img');
